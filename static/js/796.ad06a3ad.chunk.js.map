{"version":3,"file":"static/js/796.ad06a3ad.chunk.js","mappings":"wKACA,G,QAA0B,0BAA1B,EAAgE,4BAAhE,EAAqG,wBAArG,EAAwI,0BAAxI,EAA4K,yBAA5K,EAA8M,wB,mBCQjMA,EAAa,SAACC,GAEvB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,gBAAKC,UAAS,UAAKC,EAAL,YAAiBA,GAA/B,UACI,SAAC,KAAD,CAASC,GAAIJ,EAAMK,gBAAiBF,EAApC,SAA+CJ,EAAMO,UCRpDC,EAAU,SAACR,GACpB,OACI,gBAAKG,UAAWC,EAAhB,SACKJ,EAAMS,W,oBCDNC,EAAiB,SAACV,GAE3B,OAA6DW,EAAAA,EAAAA,MAAtDC,EAAP,EAAOA,SAAUC,EAAjB,EAAiBA,aAAcC,EAA/B,EAA+BA,MAAmBC,EAAlD,EAAsCC,UAAYD,OAQlD,OACI,kBAAME,SAAUJ,GAP8B,SAACK,GAC/ClB,EAAMmB,YAAYD,EAAKT,SACvBK,OAKA,WACI,0BACI,uCAAcF,EAAS,UAAW,CAACQ,SAAU,+BAA7C,IACUC,YAAa,uBAG1BN,EAAON,UAAW,gBAAKa,MAAO,CAACC,MAAO,MAAOC,WAAY,QAAvC,SAAiDT,EAAON,QAAQA,WACnF,0BACI,2C,qDClBVgB,EAAkB,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,KAAKD,SCM3B,IAcA,GAAeE,EAAAA,EAAAA,KDhBR,SAA8BC,GAUjC,OADiCC,EAAAA,EAAAA,IAAQN,EAARM,EARP,SAAC/B,GAEvB,IAAK2B,EAAwB3B,EAAxB2B,OAAWK,GAAhB,OAA6BhC,EAA7B,GAEA,OAAI2B,GAEG,SAACG,GAAD,UAAeE,KAFH,SAAC,KAAD,CAAU3B,GAAI,iBCarC0B,EAAAA,EAAAA,KAhBoB,SAACL,GACrB,MAAO,CACHO,YAAaP,EAAMO,gBAIA,SAACC,GACxB,MAAO,CACHf,YAAa,SAACV,GACVyB,GAASC,EAAAA,EAAAA,GAAc1B,SAKnC,ECvBuB,SAACT,GAEpB,IAAI0B,EAAQ1B,EAAMiC,YAEdG,EAAiBV,EAAMW,QAAQC,KAAI,SAAAC,GAAC,OAAI,SAACxC,EAAD,CAAYQ,KAAMgC,EAAEhC,KAAiBL,GAAIqC,EAAErC,IAAZqC,EAAErC,OACzEsC,EAAkBd,EAAMe,SAASH,KAAI,SAAAI,GAAC,OAAI,SAAClC,EAAD,CAASC,QAASiC,EAAEjC,SAAciC,EAAExC,OAElF,OACI,iBAAKC,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACKgC,KAEL,iBAAKjC,UAAWC,EAAhB,WACI,+BAAOoC,EAAP,QACA,SAAC9B,EAAD,CAAgBS,YAAanB,EAAMmB","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/NewMessageForm.tsx","hoc/WithAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__E0JtR\",\"dialogItem\":\"Dialogs_dialogItem__hnnJz\",\"dialog\":\"Dialogs_dialog__7jWi8\",\"messages\":\"Dialogs_messages__n9N+C\",\"message\":\"Dialogs_message__G7awS\",\"active\":\"Dialogs_active__9iB4g\"};","import s from \"../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {DialogsType} from \"../../../redux/dialogs-reducer\";\r\n\r\n\r\n\r\n\r\n\r\nexport const DialogItem = (props:DialogsType) => {\r\n\r\n    let path = '/dialogs/' + props.id\r\n    return (\r\n        <div className={`${s.dialog} ${s.active}`}>\r\n            <NavLink to={path} activeClassName={s.active}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}","import s from '../Dialogs.module.css'\r\nimport React from \"react\";\r\nimport {MessagesType} from \"../../../redux/dialogs-reducer\";\r\n\r\n\r\n\r\nexport const Message = (props:MessagesType) => {\r\n    return (\r\n        <div className={s.message}>\r\n            {props.message}\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {SubmitHandler, useForm} from \"react-hook-form\";\r\nimport {newMessageFields} from \"./new-message-form-interface\";\r\n\r\ntype NewMessageFormType = {\r\n    sendMessage: (message: string) => void\r\n}\r\n\r\nexport const NewMessageForm = (props: NewMessageFormType) => {\r\n\r\n    const {register, handleSubmit, reset, formState: {errors}} = useForm<newMessageFields>()\r\n\r\n    const onSubmit: SubmitHandler<newMessageFields> = (data) => {\r\n        props.sendMessage(data.message)\r\n        reset()\r\n    }\r\n\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n            <div>\r\n                <textarea {...register(\"message\", {required: 'Message is required field'})}\r\n                          placeholder={'Add new message'}\r\n                />\r\n            </div>\r\n            {errors.message && <div style={{color: 'red', fontWeight: 'bold'}}>{errors.message.message}</div>}\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n","import React, {ComponentType} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function WithAuthRedirect<T> (Component: ComponentType<T>)  {\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if(!isAuth) return <Redirect to={'/login'}/>\r\n\r\n        return <Component {...restProps as T}/>\r\n    }\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n    return ConnectedRedirectComponent\r\n}","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {DialogsPageType, sendMessageAC} from \"../../redux/dialogs-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {WithAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\n\r\n\r\nexport type StateToPropsType = {\r\n    dialogsPage: DialogsPageType\r\n}\r\n\r\nexport type DispatchToPropsType = {\r\n    sendMessage: (message: string) => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): StateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): DispatchToPropsType => {\r\n    return {\r\n        sendMessage: (message: string) => {\r\n            dispatch(sendMessageAC(message))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    WithAuthRedirect,\r\n    connect<StateToPropsType, DispatchToPropsType, {}, AppStateType>(mapStateToProps, mapDispatchToProps)\r\n)\r\n(Dialogs)","import React from \"react\";\r\nimport s from './Dialogs.module.css';\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {DispatchToPropsType, StateToPropsType} from \"./DialogsContainer\";\r\nimport {NewMessageForm} from \"./NewMessageForm\";\r\n\r\n\r\nexport const Dialogs = (props: StateToPropsType & DispatchToPropsType) => {\r\n\r\n    let state = props.dialogsPage\r\n\r\n    let dialogsElement = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id}/>)\r\n    let messagesElement = state.messages.map(m => <Message message={m.message} key={m.id}/>)\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogItem}>\r\n                {dialogsElement}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div> {messagesElement} </div>\r\n                <NewMessageForm sendMessage={props.sendMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}"],"names":["DialogItem","props","path","id","className","s","to","activeClassName","name","Message","message","NewMessageForm","useForm","register","handleSubmit","reset","errors","formState","onSubmit","data","sendMessage","required","placeholder","style","color","fontWeight","mapStateToProps","state","isAuth","auth","compose","Component","connect","restProps","dialogsPage","dispatch","sendMessageAC","dialogsElement","dialogs","map","d","messagesElement","messages","m"],"sourceRoot":""}